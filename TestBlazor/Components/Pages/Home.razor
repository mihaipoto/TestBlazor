@page "/"
@inject ITrafficClassifier TrafficClassifier
@inject IJSRuntime JS
@rendermode InteractiveServer
@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor.Data
@using System.Dynamic
@using Syncfusion.Blazor.Notifications
@using Syncfusion.Blazor.Buttons


<div class="container">
	@if (string.IsNullOrWhiteSpace(TrafficClassifier.InitialisationError))
	{
		<div class="card  mb-2  @backgroundColorClass ">
			<div class="card-header d-flex justify-content-center @textColorClass">
				<h1>Title</h1>
			</div>
			<div class="card-body">
				<div class="d-flex justify-content-end align-items-center">
					<SfButton class="btn btn-primary m-2" Content="@Content" @onclick="ToggleTheme" @ref="ToggleBtnObj"></SfButton>
					<SfSwitch @bind-Checked="@IsRefreshing" />
				</div>

				<div class="d-flex justify-content-end">
					<p class="@textColorClass" style="font-size:smaller"><em>@RefreshString</em>  </p>
				</div>
			</div>

		</div>


		<div class="card  mb-2  @backgroundColorClass ">
			<div class="card-header @textColorClass">
				<h5> Interfaces </h5>
			</div>
			<SfGrid class="card-body" DataSource="@TrafficClassifier.MyNetworkDevices" />
		</div>





		<div class="card  mb-2  @backgroundColorClass ">
			<div class="card-header @textColorClass">
				<h5> Last green connections </h5>
			</div>

			<div class="card-body">
				<SfGrid DataSource="@TrafficClassifier.LastGreenConnections"
						EnableStickyHeader="true" />
			</div>

		</div>

		<div class="card  mb-2  @backgroundColorClass ">
			<div class="card-header @textColorClass">
				<h5> Last red connections </h5>
			</div>

			<div class="card-body">
				<SfGrid DataSource="@TrafficClassifier.LastRedConnections"
						AllowGrouping="true"
						EnableStickyHeader="true" />
			</div>

		</div>
	}
	else
	{
		<div class="card  mb-2  @backgroundColorClass ">
			<div class="card-header d-flex justify-content-center @textColorClass">
				<h1>Title</h1>
			</div>
			<div class="card-body">
				<div class="text-bg-danger">
					<h3>Initialisation error: "@TrafficClassifier.InitialisationError"</h3>
				</div>


			</div>
		</div>
	}
</div>



@code {

	private bool _isRefreshing = false;

	private PeriodicTimer periodicTimer = new(TimeSpan.FromSeconds(5));

	private DateTime LastRefresh { get; set; } = DateTime.Now;

	private string RefreshString => IsRefreshing ? $"Last refresh: {LastRefresh}" : $"NOT Refreshing: {LastRefresh}";

	private bool IsRefreshing
	{
		get => _isRefreshing;
		set
		{
			if (_isRefreshing != value)
			{
				_isRefreshing = value;
				if (_isRefreshing)
				{
					_ = RefreshTask(refreshCTS.Token);
				}
				else
				{
					refreshCTS.Cancel();
					refreshCTS = new();
				};
			};
		}
	}

	private CancellationTokenSource refreshCTS = new();



	protected override void OnInitialized()
	{
		IsRefreshing = true;
		// TrafficClassifier.PropertyChanged += (sender, args) => InvokeAsync(InfoBtnOnClick);
	}

	async Task RefreshTask(CancellationToken cancellationToken)
	{

		PeriodicTimer periodicTimer = new(TimeSpan.FromSeconds(5));
		while (!cancellationToken.IsCancellationRequested)
		{
			await periodicTimer.WaitForNextTickAsync(cancellationToken);
			LastRefresh = DateTime.Now;
			await InvokeAsync(() => StateHasChanged());

		};

	}


	SfButton ToggleBtnObj;

	private string textColorClass => IsLightTheme ? "text-dark" : "text-light";

	private string borderColorClass => IsLightTheme ? "border-dark" : "border-light";

	private string backgroundColorClass => IsLightTheme ? "bg-light" : "bg-dark";

	public string Content = ThemeTypes.Light;

	bool IsLightTheme => Content.Equals(ThemeTypes.Light);

	public void ToggleTheme()
	=> JS.InvokeAsync<object>("setTheme", Content = IsLightTheme ? ThemeTypes.Dark : ThemeTypes.Light);


	}





