@page "/"
@inject ITrafficClassifier TrafficClassifier
@inject IJSRuntime JS
@rendermode InteractiveServer
@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor.Data
@using System.Dynamic
@using Syncfusion.Blazor.Notifications
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.Layouts
@using Syncfusion.Blazor.Popups
@using Syncfusion.Blazor.Charts
@using Syncfusion.Blazor.Navigations



<div class="container-fluid">



	@if (string.IsNullOrWhiteSpace(TrafficClassifier.InitialisationError))
	{
		<div class="container">
			<div class="card-header d-flex justify-content-center @textColorClass">
				<h1>Title</h1>
			</div>

			<div class="d-flex justify-content-end align-items-center">
				<SfButton class="btn btn-primary m-2" Content="@Content" @onclick="ToggleTheme"></SfButton>
				<SfSwitch @bind-Checked="@IsRefreshing" />
			</div>




			<div class="d-flex justify-content-end">
				<p class="@textColorClass" style="font-size:smaller"><em>@RefreshString</em>  </p>
			</div>


			<SfAccordion class="mb-4">
				<AccordionItems>
					<AccordionItem Expanded="true">
						<HeaderTemplate>Add/Remove dashboard elements</HeaderTemplate>
						<ContentTemplate>
							<SfCheckBox @bind-Checked="@IsRedConnectionsVisible">Red Connections: @IsRedConnectionsVisible</SfCheckBox>
							<SfCheckBox @bind-Checked="@IsGreenConnectionsVisible">Green Connections: @IsGreenConnectionsVisible</SfCheckBox>
							<SfCheckBox @bind-Checked="@IsMonitoredInterfacesVisible">Interfaces: @IsMonitoredInterfacesVisible</SfCheckBox>

						</ContentTemplate>
					</AccordionItem>
				</AccordionItems>
			</SfAccordion>
		</div>

		<div class="container-fluid">

			<SfDashboardLayout Columns="2" AllowResizing="true" AllowFloating="false" AllowDragging="true" >
				<DashboardLayoutPanels>

					@if (IsRedConnectionsVisible)
					{
						<DashboardLayoutPanel Id="redConnections" Row="0" Column="0" >
							<HeaderTemplate>
								<h5> Last red connections </h5>
							</HeaderTemplate>
							<ContentTemplate>

								<SfGrid Height="100%"
										DataSource="@TrafficClassifier.LastRedConnections.OrderByDescending(r => r.LastActivity)"
										AllowGrouping="true"
										EnableStickyHeader="true"
										AllowResizing="true" />

							</ContentTemplate>
						</DashboardLayoutPanel>
					}
					@if (IsGreenConnectionsVisible)
					{
						<DashboardLayoutPanel Id="greenConnections" Row="0" Column="1">
							<HeaderTemplate>
								<h5> Last green connections </h5>
							</HeaderTemplate>
							<ContentTemplate>
								<SfGrid Height="100%"
										AllowResizing="true"
										DataSource="@TrafficClassifier.LastGreenConnections.OrderByDescending(r => r.LastActivity)"
										EnableStickyHeader="true" />
							</ContentTemplate>
						</DashboardLayoutPanel>
					}
					@if (IsMonitoredInterfacesVisible)
					{
						<DashboardLayoutPanel Id="devices" Row="1" Column="0">
							<HeaderTemplate>
								<h5> Monitored interfaces </h5>
							</HeaderTemplate>
							<ContentTemplate>
								<SfGrid Height="100%"
										EnableStickyHeader="true"
										AllowResizing="true"
										DataSource="@TrafficClassifier.MyNetworkDevices" />
							</ContentTemplate>
						</DashboardLayoutPanel>
					}
				</DashboardLayoutPanels>
			</SfDashboardLayout>

		</div>

	}
	else
	{
		<div class="card  mb-2  @backgroundColorClass ">
			<div class="card-header d-flex justify-content-center @textColorClass">
				<h1>Title</h1>
			</div>
			<div class="card-body">
				<div class="text-bg-danger">
					<h3>Initialisation error: "@TrafficClassifier.InitialisationError"</h3>
				</div>


			</div>
		</div>
	}
</div>



@code {


	public bool IsRedConnectionsVisible { get; set; } = false;

	public bool IsGreenConnectionsVisible { get; set; } = false;

	public bool IsMonitoredInterfacesVisible { get; set; } = false;

	private bool _isRefreshing = false;

	private PeriodicTimer periodicTimer = new(TimeSpan.FromSeconds(5));

	private DateTime LastRefresh { get; set; } = DateTime.Now;

	private string RefreshString => IsRefreshing ? $"Last refresh: {LastRefresh}" : $"NOT Refreshing: {LastRefresh}";

	private bool IsRefreshing
	{
		get => _isRefreshing;
		set
		{
			if (_isRefreshing != value)
			{
				_isRefreshing = value;
				if (_isRefreshing)
				{
					_ = RefreshTask(refreshCTS.Token);
				}
				else
				{
					refreshCTS.Cancel();
					refreshCTS = new();
				};
			};
		}
	}

	private CancellationTokenSource refreshCTS = new();



	protected override void OnInitialized()
	{
		IsRefreshing = true;
		// TrafficClassifier.PropertyChanged += (sender, args) => InvokeAsync(InfoBtnOnClick);
	}

	async Task RefreshTask(CancellationToken cancellationToken)
	{

		PeriodicTimer periodicTimer = new(TimeSpan.FromSeconds(5));
		while (!cancellationToken.IsCancellationRequested)
		{
			await periodicTimer.WaitForNextTickAsync(cancellationToken);

			LastRefresh = DateTime.Now;
			await InvokeAsync(() => StateHasChanged());

		};

	}




	private string textColorClass => IsLightTheme ? "text-dark" : "text-light";

	private string borderColorClass => IsLightTheme ? "border-dark" : "border-light";

	private string backgroundColorClass => IsLightTheme ? "bg-light" : "bg-dark";

	public string Content = ThemeTypes.Light;

	bool IsLightTheme => Content.Equals(ThemeTypes.Light);

	public void ToggleTheme()
	=> JS.InvokeAsync<object>("setTheme", Content = IsLightTheme ? ThemeTypes.Dark : ThemeTypes.Light);



}








